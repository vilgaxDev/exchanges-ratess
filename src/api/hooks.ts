/**
 * hooks.ts
 * Hooks for managing api request and responses.
 */

// Node Modules
import {useCallback} from 'react';
import {useDispatch} from 'react-redux';

// Actions
import api from 'api/actions';
import {pushAppException} from 'common/actions';

// Utils
import {createActionKey} from './utils';

export function useAPIResponse(key: string) {
  // Hooks
  const dispatch = useDispatch();
  // const {post: postAuthRefresh} = useAuthRefreshAPI();

  // TODO: Add in try / catch / exception.
  const handleResponse = useCallback(
    async (onRequest, onSuccess, onError = (data) => data) => {

      const handleError = (data = {}) => {
        // Utilizes optional callback to create custom error object, otherwise
        // returns data argument.
        const error = onError(data);

        // Dispatches api error action for specified api key.
        dispatch(api[`set${createActionKey(key)}Error`](error));
      };

      // Sets initial status for redux api store associated with call.
      dispatch(api[`${key}_INITIAL_STATE_ACTION`]);

      // Sets loading state for api call.
      dispatch(api[`set${createActionKey(key)}IsLoading`](true));

      let data = null;
      let statusCode = null;
      const response = await onRequest();

      if (response instanceof Response) {
        // Ensures that response is of correct instance otherwise handles as an
        // exception.
        statusCode = response.status;
        if ([200, 201, 400].includes(statusCode)) {
          // Success or General Error

          // Parses JSON object if response is not automatically generated by
          // server.
          data = await response.json();
          if ([200, 201].includes(statusCode)) {
            onSuccess(data);
          } else if (statusCode === 400) {
            handleError(data);
          }
        } else if (statusCode === 401) {
          // General Error
        } else {
          // All other Errors
          if (statusCode === 403) {
            handleError({ message: 'Forbidden' });
          } else if (statusCode === 422) {
            // Should not occur as `Authorization` header should not be included
            // if token is `undefined`.
            handleError({ message: 'Unprocessable entity'});
          } else if (statusCode === 500) {
            handleError({ message: 'Server Error' });
          }
        }

        // Sets the status code of the response to api redux store.
        dispatch(api[`set${createActionKey(key)}StatusCode`](statusCode));
      } else {
        // Exception handling

        // Sets the exception message to api redux store.
        dispatch(api[`set${createActionKey(key)}Exception`](response));

        // Creates an exception notification to render in app.
        dispatch(pushAppException(response, null));
      }

      // Sets the loading state of the api to `false`
      dispatch(api[`set${createActionKey(key)}IsLoading`](false));

      // Returns object with response data and status.
      return {
        data,
        status: statusCode,
      };
  }, [dispatch]);

  return handleResponse;
}
